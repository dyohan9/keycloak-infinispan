<?xml version="1.0" encoding="UTF-8"?>
<!--
  Default stack using IP multicasting. It is similar to the "udp"
  stack in stacks.xml, but doesn't use streaming state transfer and flushing
  author: Bela Ban
-->

<config xmlns="urn:org:jgroups"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="urn:org:jgroups http://www.jgroups.org/schema/jgroups.xsd">
    <TCP bind_port="7800"
         recv_buf_size="${tcp.recv_buf_size:130k}"
         send_buf_size="${tcp.send_buf_size:130k}"
         max_bundle_size="64K"
         sock_conn_timeout="300"
         thread_pool.min_threads="0"
         thread_pool.max_threads="20"
         thread_pool.keep_alive_time="30000"/>
    <RED/>

    <JDBC_PING connection_driver="org.postgresql.Driver"
               connection_username="${env.KC_DB_USERNAME}"
               connection_password="${env.KC_DB_PASSWORD}"
               connection_url="jdbc:postgresql://${env.KC_DB_URL_HOST}/${env.KC_DB_URL_DATABASE}"
               initialize_sql="CREATE TABLE IF NOT EXISTS JGROUPSPING (own_addr varchar(200) NOT NULL, cluster_name varchar(200) NOT NULL, ping_data BYTEA, constraint PK_JGROUPSPING PRIMARY KEY (own_addr, cluster_name));"
               info_writer_sleep_time="500"
               remove_all_data_on_view_change="true"
    />
    <!-- level="debug" not supported -->
    <!-- clear_table_on_view_change="true" not supported -->

    <MERGE3 max_interval="30000"
            min_interval="10000"/>
    <FD_SOCK/>
    <FD_ALL/>
    <VERIFY_SUSPECT timeout="1500"  />

    <!--
    Enable symmetric encryption, see: http://www.jgroups.org/javadoc/org/jgroups/protocols/SYM_ENCRYPT.html
    -->
    <SYM_ENCRYPT provider="SunJCE"
                 sym_algorithm="AES"
                 keystore_name="${env.JGROUPS_KEYSTORE_PATH:/opt/keycloak/conf/jgroups.p12}"
                 keystore_type="PKCS12"
                 alias="${env.JGROUPS_KEYSTORE_ALIAS:jgroups}"
                 store_password="${env.JGROUPS_KEYSTORE_PASSWORD:changeme3}"/>

    <BARRIER />
    <pbcast.NAKACK2 xmit_interval="500"
                    xmit_table_num_rows="100"
                    xmit_table_msgs_per_row="2000"
                    xmit_table_max_compaction_time="30000"
                    use_mcast_xmit="false"
                    discard_delivered_msgs="true"/>
    <UNICAST3 xmit_interval="500"
              xmit_table_num_rows="100"
              xmit_table_msgs_per_row="2000"
              xmit_table_max_compaction_time="60000"
              conn_expiry_timeout="0"/>
    <pbcast.STABLE desired_avg_gossip="50000"
                   max_bytes="4M"/>

    <!--
    Add authentication, see http://www.jgroups.org/manual4/index.html#AUTH

    """
    Problems with AUTH
    The problem with (deprecated) MD5Token and SimpleToken implementations is that an attacker can find out the value of the hashed password (MD5Token) or the plain password (SimpleToken). Once they have it, they can bypass AUTH and join (or merge into) a cluster. See https://issues.jboss.org/browse/JGRP-2367 for details.
    The usefulness of AUTH therefore only lies in filtering out JOIN/MERGE requests from members that are not included in a list of IP addresses (FixedMembershipToken) or IP addresses / hosts / symbolic names (RegexMembership).
    """
    -->
    <AUTH auth_class="org.jgroups.auth.MD5Token"
          token_hash="SHA"
          auth_value="${env.KEYCLOAK_JGROUPS_AUTH_PASSWORD:changeme2}"/>

    <pbcast.GMS print_local_addr="true" join_timeout="2000"/>
    <UFC max_credits="10M"
         min_threshold="0.4"/>
    <MFC max_credits="10M"
         min_threshold="0.4"/>
    <FRAG2 frag_size="60K"  />
    <RSVP resend_interval="2000" timeout="10000"/>
    <pbcast.STATE_TRANSFER />
</config>